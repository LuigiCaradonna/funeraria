#pragma once

#include "qstring.h"
#include "qlabel.h"
#include <QFile>
#include <QList>
#include <QFileInfo>
#include <cmath>
#include <filesystem>
#include <QLineEdit>

class Helpers
{
public:
    /*
     * Truncates a float to the given number of decimals.
     *
     * @param   const float&    number      - number to truncate
     * @param   int             decimals    - number of wanted decimal digits
     *
     * @return  float    The truncated number.
     */
    static float truncToDecimal(const float& number, int decimals);

    /*
     * Formats the number of seconds passed as int to a string h:m:s.
     *
     * @param   const int&  seconds    - Number of seconds to be formatted.
     *
     * @return  QString    The formatted time string.
     */
    static QString secondsToTimestring(const int seconds);

    /*
     * Checks if the given file corresponds to an existing file.
     *
     * @param   const std::string&  s    - String containing the file or path\file to check.
     *
     * @return  bool    true if the file exists, false otherwise.
     */
    static bool fileExists(const std::string& s);

    /*
     * Checks if the given full path corresponds to a valid PGR file.
     *
     * @param   const QString&  s    - String containing the path to check.
     *
     * @return  short    status code representing the result of the checks.
     */
    static short isPgrFile(const QString& s);

    /*
     * Elides a long text to fit the label width.
     *
     * @param   const QLabel&   label    - Label where to write the text.
     * @param   const QString&  text     - Text to write into the label.
     *
     * @return QString  - The elided text
     */
    static QString elideText(const QLabel& label, const QString& text);

    /*
     * Elides a long text to fit the label width.
     *
     * @param   const QLineEdit&   label    - Input field where to write the text.
     * @param   const QString&     text     - Text to write into the field.
     *
     * @return QString  - The elided text
     */
    static QString elideText(const QLineEdit& line, const QString& text);

    /*
     * Formats a decimal number to be used as coordinate as the machine's software expects:
     * truncates to the third decimal digit, deletes the decimal part if it is zero.
     * The generated file would work even without this formatting, but in this way we keep
     * the consistency with the file directly generated by Galaxy Stone.
     *
     * @param   float   num         - Number to be formatted.
     * @param   int     decimals    - Amount of wanted decimals.
     *
     * @return float  - The formatted number
     */
    static float formatNumberForIsoFile(float num, int decimals = 3);

    /*
     * Generates a vector of strings containing the content of the provided file(s).
     *
     * @param   QStringList filenames    - The name of the file(s) to read
     *
     * @return QStringList  - A vector of strings containig the content of the provided file
     */
    static QStringList getFilesContentAsVector(QStringList filenames);

    /*
     * Generates a vector of strings containing the content of the provided file.
     *
     * @param   QString filename    - The name of the file to read
     *
     * @return QStringList  - A vector of strings containig the content of the provided file
     */
    static QStringList getFileContentAsVector(QString filename);
};

